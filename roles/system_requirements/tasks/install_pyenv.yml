# FIXME: if there's CHANGELOG inside, first occurence of "## Release (version)" will
# have version number, which we can use to skip downloading and unpacking

- name: "Ensure {{ pyenv_dir }} exists"
  ansible.builtin.file:
    path: "{{ pyenv_dir }}"
    state: directory
    owner: "{{ system_user_name }}"
    group: "{{ system_user_name }}"

- name: "Read pyenv version"
  ansible.builtin.command: >
    awk '/Release/ {print $NF;exit}' {{ pyenv_dir }}/CHANGELOG.md
  register: _pyenv_version_check
  failed_when: false
  no_log: true
  ignore_errors: true

- name: "Check if pyenv setup may be skipped"
  set_fact:
    _skip_pyenv_setup: true
  when:
    - _pyenv_version_check.rc == 0
    - pyenv_version in _pyenv_version_check.stdout

- name: "Setup pyenv"
  block:

    - name: "Download pyenv {{ pyenv_version }}"
      ansible.builtin.get_url:
        url: "https://github.com/pyenv/pyenv/archive/refs/tags/v{{ pyenv_version }}.tar.gz"
        dest: "{{ system_user_home }}/pyenv.tar.gz"

    - name: "Unpack pyenv"
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{ system_user_home }}/pyenv.tar.gz"
        dest: "{{ pyenv_dir }}"
        extra_opts:
          - "--strip-components=1"
        owner: "{{ system_user_name }}"
        group: "{{ system_user_name }}"

    - name: "Remove downloaded archive"
      ansible.builtin.file:
        path: "{{ system_user_home }}/pyenv.tar.gz"
        state: absent

  when: _skip_pyenv_setup is undefined

- name: "Ensure pyenv is loaded automatically"
  ansible.builtin.blockinfile:
    path: "{{ system_user_home }}/.bashrc"
    block: |
      export PYENV_ROOT="{{ pyenv_dir }}"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
    marker: "# {mark} Kustosz pyenv setup managed by Ansible"

- name: "Check if Python {{ pyenv_python_version }} must be compiled"
  ansible.builtin.stat:
    path: "{{ pyenv_dir }}/versions/{{ pyenv_python_version }}/bin/python"
  register: _pyenv_python_binary

- name: "Install Python {{ pyenv_python_version }}"
  ansible.builtin.shell: "pyenv install --skip-existing {{ pyenv_python_version }}"
  args:
    executable: "{{ shell_wrapper_script }}"
  when: not _pyenv_python_binary.stat.exists

- name: "Set up default Python version to {{ pyenv_python_version }}"
  ansible.builtin.copy:
    dest: "{{ system_user_home }}/.python-version"
    content: |
      {{ pyenv_python_version }}
    owner: "{{ system_user_name }}"
    group: "{{ system_user_name }}"
